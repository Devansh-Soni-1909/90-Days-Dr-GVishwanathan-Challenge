/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   ListNode* reverseLL(ListNode* head){
    ListNode* prev = NULL;
      ListNode* temp = head;
      while(temp){
        ListNode* nextnode = temp->next;
        temp->next = prev;
        prev = temp;
        temp = nextnode;

      }

      return prev;
   }
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head || !head->next || left==right) return head;
        ListNode* temp = head;
        int cnt = 1;
        ListNode* llhead = NULL;
        ListNode* lltail = NULL;
        ListNode* prev1 = NULL;
        ListNode* n = NULL;
        while (temp && cnt < left) {  
            prev1 = temp;
            temp = temp->next;
            cnt++;
        }
        llhead = temp; 
        
         while (temp && cnt < right) { 
            temp = temp->next;
            cnt++;
        }
        lltail = temp;
         n = temp ? temp->next : nullptr;

        if (prev1) prev1->next = nullptr; 
        if (lltail) lltail->next = nullptr;

        ListNode* reverseHead = reverseLL(llhead);

        if (prev1) prev1->next = reverseHead;
        else head = reverseHead; 

        ListNode* t = reverseHead;
        while (t->next) t = t->next;
        t->next = n;

        return head;
        
    }
};
